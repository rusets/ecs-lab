image_and_deploy:
  name: Build & Push Image, Update ECS TaskDef & Service
  needs: terraform
  runs-on: ubuntu-latest
  if: ${{ !(github.event_name == 'workflow_dispatch' && inputs.mode == 'destroy') }}

  steps:
    - name: Checkout
      uses: actions/checkout@v4

    # OIDC least-priv role for ECR push + ECS update
    - name: Configure AWS (ecs role)
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: arn:aws:iam::097635932419:role/github-actions-ecs-role
        aws-region: ${{ env.AWS_REGION }}

    - name: WhoAmI (ecs)
      env:
        AWS_PAGER: ""
        AWS_DEFAULT_REGION: ${{ env.AWS_REGION }}
      run: aws sts get-caller-identity

    - name: Login to Amazon ECR
      uses: aws-actions/amazon-ecr-login@v2

    # ✅ NO BUILDX — plain docker build & push
    - name: Build and push Docker image (plain docker)
      env:
        IMAGE_LATEST: "${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}"
        IMAGE_SHA:    "${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_SHA_TAG }}"
      run: |
        set -euo pipefail
        echo "Building image: $IMAGE_LATEST"
        docker build -f app/Dockerfile -t "$IMAGE_LATEST" app
        docker tag "$IMAGE_LATEST" "$IMAGE_SHA"
        docker push "$IMAGE_LATEST"
        docker push "$IMAGE_SHA"
        echo "Image pushed:"
        echo "  latest => $IMAGE_LATEST"
        echo "  sha    => $IMAGE_SHA"

    - name: Ensure jq is installed
      run: sudo apt-get update && sudo apt-get install -y jq

    - name: Describe current service (get task def)
      id: svc
      env:
        AWS_PAGER: ""
        AWS_DEFAULT_REGION: ${{ env.AWS_REGION }}
      run: |
        aws ecs describe-services \
          --cluster "${CLUSTER_NAME}" \
          --services "${SERVICE_NAME}" \
          --region "${AWS_REGION}" \
          --query "services[0].taskDefinition" \
          --output text > td_arn.txt
        echo "td_arn=$(cat td_arn.txt)" >> "$GITHUB_OUTPUT"

    - name: Get current task definition JSON (full)
      env:
        AWS_PAGER: ""
        AWS_DEFAULT_REGION: ${{ env.AWS_REGION }}
      run: |
        aws ecs describe-task-definition \
          --task-definition "${{ steps.svc.outputs.td_arn }}" \
          --region "${AWS_REGION}" \
          --query "taskDefinition" > taskdef.json
        cat taskdef.json

    - name: Build new task definition JSON with updated image
      id: build_td
      env:
        IMAGE_SHA: "${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_SHA_TAG }}"
      run: |
        # prefer container "app", otherwise first one
        CN=$(jq -r '
          ([.containerDefinitions[] | select(.name=="app") | .name] + [.containerDefinitions[0].name])[0]
        ' taskdef.json)
        echo "Container name: $CN"

        jq --arg IMG "$IMAGE_SHA" --arg CN "$CN" '
          del(.revision, .status, .taskDefinitionArn, .requiresAttributes, .compatibilities, .registeredBy, .registeredAt)
          | .containerDefinitions = (.containerDefinitions
              | map(if .name == $CN then .image = $IMG else . end))
        ' taskdef.json > register.json

        echo "=== TaskDef to register ==="
        cat register.json

    - name: Register new task definition
      id: register_td
      env:
        AWS_PAGER: ""
        AWS_DEFAULT_REGION: ${{ env.AWS_REGION }}
      run: |
        NEW_TD_ARN=$(aws ecs register-task-definition \
          --region "${AWS_REGION}" \
          --cli-input-json file://register.json \
          --query "taskDefinition.taskDefinitionArn" \
          --output text)
        echo "new_td_arn=${NEW_TD_ARN}" >> "$GITHUB_OUTPUT"
        echo "Registered: ${NEW_TD_ARN}"

    - name: Update service to new task definition
      env:
        AWS_PAGER: ""
        AWS_DEFAULT_REGION: ${{ env.AWS_REGION }}
      run: |
        aws ecs update-service \
          --cluster "$CLUSTER_NAME" \
          --service "$SERVICE_NAME" \
          --task-definition "${{ steps.register_td.outputs.new_td_arn }}" \
          --region "$AWS_REGION"

    - name: Wait for service stability
      timeout-minutes: 10
      env:
        AWS_PAGER: ""
        AWS_DEFAULT_REGION: ${{ env.AWS_REGION }}
      run: |
        aws ecs wait services-stable \
          --cluster "${CLUSTER_NAME}" \
          --services "${SERVICE_NAME}" \
          --region "${AWS_REGION}"